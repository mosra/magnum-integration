/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
                2020, 2021 Vladimír Vondruš <mosra@centrum.cz>
    Copyright © 2018 Jonathan Hale <squareys@googlemail.com>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

/** @dir magnum-integration/src/Magnum
 * @brief Namespace @ref Magnum (part of @ref building-integration "Magnum Integration library")
 */

/** @dir Magnum/BulletIntegration
 * @brief Namespace @ref Magnum::BulletIntegration
 */
/** @namespace Magnum::BulletIntegration
@brief Integration with Bullet Physics

Conversion of matrix and vector classes, wrappers for rigid body dynamics.

This library depends on the [Bullet Physics](http://bulletphysics.org/) library
and is built if `WITH_BULLET` is enabled when building Magnum Integration. To
use this library with CMake, put [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
and [FindBullet.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindBullet.cmake)
into your `modules/` directory, request the `Bullet` component of the
`MagnumIntegration` package and link to the `MagnumIntegration::Bullet` target:

@code{.cmake}
find_package(MagnumIntegration REQUIRED Bullet)

# ...
target_link_libraries(your-app PRIVATE MagnumIntegration::Bullet)
@endcode

Additionally, if you're using Magnum as a CMake subproject, bundle the
[magnum-integration](https://github.com/mosra/magnum-integration) and
[bullet3](https://github.com/bulletphysics/bullet3) repositories and do the
following *before* calling @cmake find_package() @ce. If you want to use
system-installed Bullet, omit the first part and point `CMAKE_PREFIX_PATH` to
its installation dir if necessary.

@code{.cmake}
# Disable Bullet tests and demos
set(BUILD_UNIT_TESTS OFF CACHE BOOL "" FORCE)
set(BUILD_BULLET2_DEMOS OFF CACHE BOOL "" FORCE)
set(BUILD_CPU_DEMOS OFF CACHE BOOL "" FORCE)
set(BUILD_OPENGL3_DEMOS OFF CACHE BOOL "" FORCE)
# While not needed for Magnum, you might actually want some of those
set(BUILD_ENET OFF CACHE BOOL "" FORCE)
set(BUILD_CLSOCKET OFF CACHE BOOL "" FORCE)
set(BUILD_EXTRAS OFF CACHE BOOL "" FORCE)
set(BUILD_BULLET3 OFF CACHE BOOL "" FORCE)
# This is needed in case BUILD_EXTRAS is enabled, as you'd get a CMake syntax
# error otherwise
set(PKGCONFIG_INSTALL_PREFIX "lib${LIB_SUFFIX}/pkgconfig/")
# Bullet's buildsystem doesn't correctly express dependencies between static
# libs, causing linker errors on Magnum side. If you have CMake 3.13, the Find
# module is able to correct that on its own, otherwise you need to enable
# BUILD_SHARED_LIBS to build as shared.
set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
# If you want to use double precision, uncomment this (note that you'll need a
# double-precision SceneGraph as well)
#set(USE_DOUBLE_PRECISION ON CACHE BOOL "" FORCE)
add_subdirectory(bullet3 EXCLUDE_FROM_ALL)

set(WITH_BULLET ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
@endcode

In case you get errors like the following, be sure to set `CMAKE_BUILD_TYPE` to
a valid non-empty value when configuring. Additionally, Bullet's CMakeLists
print a bunch of debug variables when configuring, that's something you have to
live with.

@m_class{m-console-wrap}

@code{.shell-session}
ninja: error: 'lib/libLinearMath.a', needed by 'lib/libMagnumBulletIntegration.so.2.4', missing and no known rule to make it
@endcode

This library provides routines for explicit conversion between Bullet and
Magnum math types, in the @ref Magnum/BulletIntegration/Integration.h header,
see its documentation for more information. See also the @ref examples-bullet
example, @ref building-integration and @ref cmake-integration.

@m_class{m-block m-success}

@thirdparty This library makes use of [Bullet Physics](http://bulletphysics.org/),
    released under the @m_class{m-label m-success} **zlib license**
    ([license text](http://zlib.net/zlib_license.html),
    [choosealicense.com](https://choosealicense.com/licenses/zlib/)).
    Attribution is appreciated but not required.
*/

/** @dir Magnum/DartIntegration
 * @brief Namespace @ref Magnum::DartIntegration
 */
/** @namespace Magnum::DartIntegration
@brief Integration with DART Dynamic Animation and Robotics Toolkit

Conversion of nodes and shapes for visualizing physics simulation.

This library depends on the [DART](https://dartsim.github.io/) library
and is built if `WITH_DART` is enabled when building Magnum Integration. To
use this library with CMake, put [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
into your `modules/` directory, request the `Dart` component of the
`MagnumIntegration` package and link to the `MagnumIntegration::Dart` target:

@code{.cmake}
find_package(MagnumIntegration REQUIRED Dart)

# ...
target_link_libraries(your-app PRIVATE MagnumIntegration::Dart)
@endcode

Additionally, if you're using Magnum as a CMake subproject, bundle the
[magnum-integration repository](https://github.com/mosra/magnum-integration)
and do the following *before* calling @cmake find_package() @ce. Using DART
itself as a CMake subproject isn't tested at the moment, so you need to provide
it as a system dependency and point `CMAKE_PREFIX_PATH` to its installation dir
if necessary.

@code{.cmake}
set(WITH_DART ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
@endcode

DART is using Eigen for mathematics and you might want to use the
@ref EigenIntegration library for easy conversion between Eigen and Magnum math
types. See also the @ref examples-dart example, @ref building-integration and
@ref cmake-integration for more information.

@experimental

<b></b>

@m_class{m-block m-success}

@thirdparty This library makes use of [DART Dynamic Animation and Robotics Toolkit](https://dartsim.github.io/),
    licensed under @m_class{m-label m-success} **BSD 2-clause**
    ([license text](https://github.com/dartsim/dart/blob/master/LICENSE),
    [choosealicense.com](https://choosealicense.com/licenses/bsd-2-clause/)).
    Attribution is required for public use.
*/

/** @dir Magnum/EigenIntegration
 * @brief Namespace @ref Magnum::EigenIntegration
 * @m_since_{integration,2019,10}
 */
/** @namespace Magnum::EigenIntegration
@brief Integration with Eigen
@m_since_{integration,2019,10}

Conversion of math types from and to the Eigen library.

@section EigenIntegration-usage Usage

This library depends on the [Eigen](http://eigen.tuxfamily.org/) library and is
built if `WITH_EIGEN` is enabled when building Magnum Integration. To use this
library with CMake, put [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
into your `modules/` directory, request the `Eigen` component of the
`MagnumIntegration` package and link to the `MagnumIntegration::Eigen` target:

@code{.cmake}
find_package(MagnumIntegration REQUIRED Eigen)

# ...
target_link_libraries(your-app PRIVATE MagnumIntegration::Eigen)
@endcode

Additionally, if you're using Magnum as a CMake subproject, bundle the
[magnum-integration](https://github.com/mosra/magnum-integration) and
[eigen](https://gitlab.com/libeigen/eigen) repositories and do the following
* *before* calling @cmake find_package() @ce. If you want to use
system-installed Eigen, omit the first part and point `CMAKE_PREFIX_PATH` to
its installation dir if necessary.

@code{.cmake}
set(EIGEN3_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/eigen)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/eigen/cmake)

set(WITH_EIGEN ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
@endcode

See also @ref building-integration and @ref cmake-integration for more
information.

@section EigenIntegration-type-conversion Type conversion

The library provides built-in conversion between Eigen's types and Magnum's own
types. For example, an @m_class{m-doc-external} [Eigen::Vector3f](https://eigen.tuxfamily.org/dox/group__matrixtypedefs.html#ga5ec9ce2d8adbcd6888f3fbf2e1c095a4)
can be easily cast to Magnum's equivalent @ref Magnum::Vector3 "Vector3":

@snippet EigenIntegration.cpp namespace

Or you can make a @ref Containers::StridedArrayView2D onto a dynamically sized
@m_class{m-doc-external} [Eigen::MatrixXd](https://eigen.tuxfamily.org/dox/group__matrixtypedefs.html#ga5ec9ce2d8adbcd6888f3fbf2e1c095a4)
and vice versa:

@snippet EigenIntegration.cpp namespace-view

The integration routines are provided in the
@ref Magnum/EigenIntegration/Integration.h and
@ref Magnum/EigenIntegration/GeometryIntegration.h headers, see their
documentation for more information.

@m_class{m-block m-warning}

@thirdparty This library makes use of the
    [Eigen](http://eigen.tuxfamily.org/),
    released under @m_class{m-label m-warning} **MPL 2.0**
    ([license text](http://www.mozilla.org/MPL/2.0),
    [choosealicense.com](https://choosealicense.com/licenses/mpl-2.0/)).
    Attribution is required for public use, source code of licensed files and
    modifications of these files have to be made available under the same
    license. Additionally, some parts rely on third-party code licensed under
    @m_class{m-label m-warning} **LGPLv3**
    ([license text](http://eigen.tuxfamily.org/index.php?title=Main_Page#License),
    [choosealicense.com](https://choosealicense.com/licenses/lgpl-3.0/)),
    requiring either dynamic linking or full source disclosure for public use.
    See the [license notes](http://eigen.tuxfamily.org/index.php?title=Main_Page#License)
    for details.

@m_class{m-block m-success}

@par Single-header version
    This library is also available as a part of the single-header,
    dependency-less [MagnumMath.h](https://github.com/mosra/magnum-singles/tree/master/MagnumMath.h)
    library in the Magnum Singles repository for easier integration into your
    projects. Opt-in by specifying @cpp #define MAGNUM_MATH_EIGEN_INTEGRATION @ce
    before including the file. See @ref singles and @ref Math for more
    information.

*/
/** @dir Magnum/GlmIntegration
 * @brief Namespace @ref Magnum::GlmIntegration
 */
/** @namespace Magnum::GlmIntegration
@brief Integration with OpenGL Mathematics (GLM)

Conversion of math types from and to the GLM library, debug output.

@section GlmIntegration-usage Usage

This library depends on the [GLM](https://glm.g-truc.net/) library and is built
if `WITH_GLM` is enabled when building Magnum Integration. To use this
library with CMake, put [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
and [FindGLM.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindGLM.cmake)
into your `modules/` directory, request the `Glm` component of the
`MagnumIntegration` package and link to the `MagnumIntegration::Glm` target:

@code{.cmake}
find_package(MagnumIntegration REQUIRED Glm)

# ...
target_link_libraries(your-app PRIVATE MagnumIntegration::Glm)
@endcode

Additionally, if you're using Magnum as a CMake subproject, bundle the
[magnum-integration repository](https://github.com/mosra/magnum-integration)
and do the following *before* calling @cmake find_package() @ce. Using GLM
itself as a CMake subproject isn't tested at the moment, so you need to provide
it as a system dependency and point `CMAKE_PREFIX_PATH` to its installation dir
if necessary.

@code{.cmake}
set(WITH_GLM ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
@endcode

@section GlmIntegration-type-conversion Type conversion

The library provides built-in conversion between GLM's types and Magnum's own
types. For example, a `glm::vec3` can be easily cast to Magnum's equivalent
@ref Magnum::Vector3 "Vector3":

@snippet GlmIntegration.cpp namespace

The integration routines are provided in @ref Magnum/GlmIntegration/Integration.h,
@ref Magnum/GlmIntegration/GtcIntegration.h and
@ref Magnum/GlmIntegration/GtxIntegration.h headers, see their documentation
for more information. See also @ref building-integration and
@ref cmake-integration.

@m_class{m-block m-success}

@thirdparty This library makes use of the
    [OpenGL Mathematics library](https://glm.g-truc.net/),
    released under @m_class{m-label m-success} **The Happy Bunny License**
    (Modified MIT License) ([license text](https://github.com/g-truc/glm/blob/master/manual.md#the-happy-bunny-license-modified-mit-license))
    or under @m_class{m-label m-success} **MIT**
    ([license text](https://github.com/g-truc/glm/blob/master/manual.md#the-mit-license),
    [choosealicense.com](https://choosealicense.com/licenses/mit/)).
    Attribution is required for public use.

@m_class{m-block m-success}

@par Single-header version
    This library is also available as a part of the single-header,
    dependency-less [MagnumMath.h](https://github.com/mosra/magnum-singles/tree/master/MagnumMath.h)
    library in the Magnum Singles repository for easier integration into your
    projects. Opt-in by specifying @cpp #define MAGNUM_MATH_GLM_INTEGRATION @ce
    before including the file. See @ref singles and @ref Math for more
    information.
*/
/** @namespace glm
@brief GLM namespace.

Extensions to the [GLM](https://glm.g-truc.net/) library.

This library depends on the [GLM](https://glm.g-truc.net/) library and is built
if `WITH_GLM` is enabled when building Magnum Integration. To use this
library with CMake, put [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
and [FindGLM.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindGLM.cmake)
into your `modules/` directory, request the `Glm` component of the
`MagnumIntegration` package and link to the `MagnumIntegration::Glm` target:

@code{.cmake}
find_package(MagnumIntegration REQUIRED Glm)

# ...
target_link_libraries(your-app PRIVATE MagnumIntegration::Glm)
@endcode

Additionally, if you're using Magnum as a CMake subproject, bundle the
[magnum-integration repository](https://github.com/mosra/magnum-integration)
and do the following *before* calling @cmake find_package() @ce. Using GLM
itself as a CMake subproject isn't tested at the moment, so you need to provide
it as a system dependency and point `CMAKE_PREFIX_PATH` to its installation dir
if necessary.

@code{.cmake}
set(WITH_GLM ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
@endcode

See also @ref building-integration and @ref cmake-integration. See the
@ref Magnum::GlmIntegration namespace for license information.
*/

/** @dir Magnum/ImGuiIntegration
 * @brief Namespace @ref Magnum::ImGuiIntegration
 */
/** @namespace Magnum::ImGuiIntegration
@brief Integration with Dear ImGui

Conversion of math classes and rendering of Dear ImGui using Magnum.

@section ImGuiIntegration-usage Usage

This library depends on [Dear ImGui](https://github.com/ocornut/imgui) and is
built if `WITH_IMGUI` is enabled when building Magnum Integration. To use this
library with CMake, put [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
and [FindImGui.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindImGui.cmake)
into your `modules/` directory, request the `ImGui` component of the
`MagnumIntegration` package and link to the `MagnumIntegration::ImGui` target:

@code{.cmake}
find_package(MagnumIntegration REQUIRED ImGui)

# ...
target_link_libraries(your-app PRIVATE MagnumIntegration::ImGui)
@endcode

Additionally, if you're using Magnum as a CMake subproject, bundle the
[magnum-integration](https://github.com/mosra/magnum-integration) and
[imgui](https://github.com/ocornut/imgui) repositories and do the following
* *before* calling @cmake find_package() @ce:

@code{.cmake}
set(IMGUI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/imgui)
set(WITH_IMGUI ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
@endcode

@section ImGuiIntegration-configuration Configuration

Dear ImGui configuration can normally be manipulated at compile time by
defining `IMGUI_USER_CONFIG` which is then included by the Dear ImGui library.
However, this library already uses this feature and defining
`IMGUI_USER_CONFIG` will not work correctly. In order to provide your own file
you can instead define `MAGNUM_IMGUIINTEGRATION_USER_CONFIG` and this file will
be included correctly:

@code{.cmake}
target_compile_definitions(your-app PRIVATE -DMAGNUM_IMGUIINTEGRATION_USER_CONFIG="my_imconfig.h")
@endcode

Routines for math type conversion are provided in @ref Magnum/ImGuiIntegration/Integration.h,
Magnum-based rendering backend for Dear ImGui is in the @ref Context class. See
also the @ref examples-imgui example, @ref building-integration and
@ref cmake-integration.

@m_class{m-block m-success}

@thirdparty This library makes use of [Dear ImGui](https://github.com/ocornut/imgui),
    licensed under @m_class{m-label m-success} **MIT**
    ([license text](https://github.com/ocornut/imgui/blob/master/LICENSE.txt),
    [choosealicense.com](https://choosealicense.com/licenses/mit/)).
    Attribution is required for public use.
*/

/** @dir Magnum/OvrIntegration
 * @brief Namespace @ref Magnum::OvrIntegration
 */
/** @namespace Magnum::OvrIntegration
@brief Integration with the Oculus SDK (LibOVR)

Conversion of math classes, wrappers for most OVR CAPI structures and functions.

This library depends on the [Oculus SDK](https://developer.oculus.com/) and is
built if `WITH_OVR` is enabled when building Magnum Integration. To use this
library with CMake, put [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
and [FindOVR.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindOVR.cmake)
into your `modules/` directory, request the `Ovr` component of the
`MagnumIntegration` package and link to the `MagnumIntegration::Ovr` target:

@code{.cmake}
find_package(MagnumIntegration REQUIRED Ovr)

# ...
target_link_libraries(your-app PRIVATE MagnumIntegration::Ovr)
@endcode

Additionally, if you're using Magnum as a CMake subproject, bundle the
[magnum-integration repository](https://github.com/mosra/magnum-integration)
and do the following *before* calling @cmake find_package() @ce. Using LibOVR
itself as a CMake subproject isn't possible, so you need to provide it as
a system dependency and point `CMAKE_PREFIX_PATH` to its installation dir if
necessary.

@code{.cmake}
set(WITH_OVR ON CACHE BOOL "" FORCE)
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)
@endcode

See the @ref examples-ovr example, @ref building-integration and
@ref cmake-integration for more information.

@m_class{m-block m-warning}

@thirdparty This library makes use of [Oculus SDK](https://developer.oculus.com/),
    released under the @m_class{m-label m-warning} **Oculus SDK license**
    ([license text](https://developer.oculus.com/licenses/sdk-3.5/)).
*/
