/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
                2020, 2021, 2022, 2023, 2024, 2025
              Vladimír Vondruš <mosra@centrum.cz>
    Copyright © 2018 Jonathan Hale <squareys@googlemail.com>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page cmake-integration Integration library usage with CMake
@brief Guide how to find and use Magnum integration libraries with CMake build system

@tableofcontents
@m_footernavigation

@section cmake-integration-installed Using Magnum Integration that was externally built and installed

The main logic is in the [FindMagnumIntegration.cmake](https://github.com/mosra/magnum-integration/blob/master/modules/FindMagnumIntegration.cmake)
module distributed in the `modules/` directory of the integration repository,
you are encouraged to copy it into your project and add path to the files to
`CMAKE_MODULE_PATH`:

@code{.cmake}
# Path where FindMagnumIntegration.cmake can be found, adapt as needed
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/modules/" ${CMAKE_MODULE_PATH})
@endcode

Otherwise, if CMake won't be able to find this file in predefined locations, it
will error out even if Magnum Integration might be installed on the system.
Note that the module files are updated as the library evolves, you are
encouraged to update your copies from time to time to avoid strange building
issues.

If you installed the library or its dependencies to non-standard location
(other than `/usr`, e.g. `/home/xyz/projects`), set `CMAKE_PREFIX_PATH` to that
directory to help CMake find it. You can enter more different dirs if you
separate them with semicolons.

@section cmake-integration-subproject Using Magnum Integration as a CMake subproject

Continuing from @ref cmake-subproject, adding Magnum Integration is very
similar. Again, the @ref building-integration-features "Integration build-time options"
have to be specified before the subdirectory gets added:

@code{.cmake}
...

set(MAGNUM_WITH_GLMINTEGRATION ON CACHE BOOL "" FORCE) # enable what you need
add_subdirectory(magnum-integration EXCLUDE_FROM_ALL)

find_package(MagnumIntegration REQUIRED ...) # see below
@endcode

Each `*Integration` namespace provides further information about additional
steps needed for a CMake subproject setup.

@section cmake-integration-find-module Finding the package and its components

Basic usage is:

@code{.cmake}
find_package(MagnumIntegration REQUIRED)
@endcode

This command tries to find Magnum integration library and then defines:

-   `MagnumIntegration_FOUND` --- Whether the library was found

This command alone is useless without specifying the components:

-   `Bullet` --- @ref BulletIntegration library
-   `Eigen` --- @ref EigenIntegration library
-   `Dart`  --- @ref DartIntegration library
-   `Glm` --- @ref GlmIntegration library
-   `ImGui` --- @ref ImGuiIntegration library
-   `Ovr` --- @ref OvrIntegration library
-   `Yoga` --- @ref YogaIntegration library

Note that [each *Integration namespace](namespaces.html) contains more detailed
information about dependencies, availability on particular platform and also
guide how to enable given library in build and use it with CMake.

Example usage with specifying additional components is:

@code{.cmake}
find_package(MagnumIntegration REQUIRED Bullet)
@endcode

For each component is then defined:

-   `MagnumIntegration_*_FOUND` --- Whether the component was found
-   `MagnumIntegration::*` --- Component imported target

The package is found if either debug or release version of each requested
library is found. If both debug and release libraries are found, proper version
is chosen based on actual build configuration of the project (i.e. `Debug`
build is linked to debug libraries, `Release` build to release libraries).

See also @ref cmake "Magnum usage with CMake" for more information.
*/
}
